#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

&mt {
    tapping-term-ms = <150>;
    hold-trigger-on-release;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hm: hm {
        compatible = "zmk,behavior-hold-tap";
        label = "HM";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <400>;
        quick-tap-ms = <400>;
        require-prior-idle-ms = <200>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&tog 5>;
            key-positions = <57 59>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC                  &kp N1          &kp N2           &kp N3        &kp N4            &kp N5             &kp C_FAST_FORWARD  &kp N6       &kp N7             &kp N8       &kp N9           &kp N0                   &lt 6 TILDE
&kp TAB                  &kp Q           &kp W            &kp E         &kp R             &kp T              &kp C_REWIND        &kp Y        &kp U              &kp I        &kp O            &kp P                    &kp BSLH
&hm LEFT_SHIFT CAPSLOCK  &hm LWIN A      &hm LEFT_ALT S   &hm LCTRL D   &hm LEFT_SHIFT F  &kp G              &kp C_PREVIOUS      &kp H        &hm RIGHT_SHIFT J  &hm RCTRL K  &hm RIGHT_ALT L  &hm RIGHT_GUI SEMICOLON  &kp APOS
&kp LCTRL                &kp Z           &kp X            &kp C         &kp V             &kp B              &kp C_NEXT          &kp N        &kp M              &kp COMMA    &kp DOT          &kp FSLH                 &kp RIGHT_SHIFT
&kp C_MUTE               &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp LEFT_ALT  &lt 2 DELETE      &lt 1 BACKSPACE    &kp K_PLAY_PAUSE    &lt 3 SPACE  &lt 4 ENTER        &kp RWIN     &kp UP_ARROW     &kp DOWN_ARROW
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        arrows {
            bindings = <
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &trans  &trans    &trans          &trans         &trans     &trans
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &trans  &trans    &trans          &trans         &trans     &trans
&trans  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT  &trans
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &trans  &kp HOME  &kp PG_UP       &kp PAGE_DOWN  &kp END    &trans
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &trans  &trans    &trans          &trans         &trans
            >;
        };

        numpad {
            bindings = <
&trans  &trans    &trans        &trans     &trans          &trans    &trans  &kp KP_MINUS     &trans        &trans        &trans        &trans  &trans
&trans  &trans    &trans        &trans     &trans          &trans    &trans  &kp KP_DIVIDE    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans  &kp LWIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &trans  &kp KP_MULTIPLY  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
&trans  &trans    &trans        &trans     &trans          &trans    &trans  &kp KP_PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&trans  &trans    &trans        &trans     &trans          &trans    &trans  &kp DOT          &kp NUMBER_0  &trans        &trans        &trans
            >;
        };

        code {
            bindings = <
&trans          &trans            &kp HASH              &trans                 &trans             &trans             &trans  &trans  &trans          &trans     &trans         &trans    &trans
&kp TILDE       &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp CARET          &trans  &trans  &trans          &trans     &trans         &trans    &trans
&kp PIPE        &kp LESS_THAN     &kp EQUAL             &kp UNDER              &kp GREATER_THAN   &kp QUESTION       &trans  &trans  &kp LEFT_SHIFT  &kp RCTRL  &kp RIGHT_ALT  &kp RWIN  &trans
&kp AMPERSAND   &kp LEFT_BRACE    &kp PLUS              &kp MINUS              &kp RIGHT_BRACE    &kp EXCLAMATION    &trans  &trans  &trans          &trans     &trans         &trans    &trans
&kp SCROLLLOCK  &kp ASTERISK      &kp SLASH             &trans                 &kp COLON          &kp GRAVE          &trans  &trans  &trans          &trans     &trans         &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        fkeys {
            bindings = <
&trans  &trans  &trans   &trans   &trans   &trans    &trans  &trans  &trans          &trans     &trans         &trans         &trans
&trans  &kt F1  &kp F2   &kp F3   &kp F4   &trans    &trans  &trans  &trans          &trans     &trans         &trans         &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &trans  &trans  &kp LEFT_SHIFT  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_WIN  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &trans  &trans          &trans     &trans         &trans         &trans
&trans  &trans  &trans   &trans   &trans   &trans    &trans  &trans  &trans          &trans     &trans         &trans
            >;
        };

        game {
            bindings = <
&trans          &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans         &trans
&trans          &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans         &trans
&kp LEFT_SHIFT  &kp A   &kp S   &kp D   &kp F   &trans       &trans  &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&trans          &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans         &trans
&trans          &trans  &trans  &trans  &trans  &kp SPACE    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        system {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans            &bl BL_INC       &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans            &bl BL_DEC       &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans            &rgb_ug RGB_BRD  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans            &rgb_ug RGB_BRI  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &bt BT_CLR_ALL    &bl BL_TOG       &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
